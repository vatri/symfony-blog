# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    image_articles_coverages_directory: '%kernel.project_dir%/public/uploads/articles/coverages/'
    image_articles_coverages_display: '/uploads/articles/coverages/'
    itemperpage: 5
    supportedLocales:
        - en
#        - fr

services:
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        bind:
            $userActionLogger: '@monolog.logger.user_action'
            $itemPerPage: '%itemperpage%'
            $targetDir: '%image_articles_coverages_directory%'
            $supportedLocales: '%supportedLocales%'
            $locale: '%locale%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    twig.extension.text:
        class: Twig_Extensions_Extension_Text
        tags:
            - { name: twig.extension }

    App\Security\LoginGithubAuthenticator:
        arguments: ["@eight_points_guzzle.client.github_oauth"]

    App\EventSubscriber\UserActionSubscriber:
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    App\EventSubscriber\PasswordTokenReset:
        tags:
            - { name: kernel.event_listener, event: token.reseted, method: resetToken }

    App\Services\Faker\Provider\EncodePasswordProvider:
        tags:
            - { name: nelmio_alice.faker.provider }
